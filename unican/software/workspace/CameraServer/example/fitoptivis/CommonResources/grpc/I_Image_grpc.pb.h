// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: I_Image_grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_I_5fImage_5fgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_I_5fImage_5fgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_I_5fImage_5fgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_I_5fImage_5fgrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_I_5fImage_5fgrpc_2eproto;
namespace I_Image_grpc {
class I_Image_in;
struct I_Image_inDefaultTypeInternal;
extern I_Image_inDefaultTypeInternal _I_Image_in_default_instance_;
class I_Image_out;
struct I_Image_outDefaultTypeInternal;
extern I_Image_outDefaultTypeInternal _I_Image_out_default_instance_;
}  // namespace I_Image_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::I_Image_grpc::I_Image_in* Arena::CreateMaybeMessage<::I_Image_grpc::I_Image_in>(Arena*);
template<> ::I_Image_grpc::I_Image_out* Arena::CreateMaybeMessage<::I_Image_grpc::I_Image_out>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace I_Image_grpc {

// ===================================================================

class I_Image_in PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:I_Image_grpc.I_Image_in) */ {
 public:
  inline I_Image_in() : I_Image_in(nullptr) {}
  ~I_Image_in() override;
  explicit constexpr I_Image_in(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  I_Image_in(const I_Image_in& from);
  I_Image_in(I_Image_in&& from) noexcept
    : I_Image_in() {
    *this = ::std::move(from);
  }

  inline I_Image_in& operator=(const I_Image_in& from) {
    CopyFrom(from);
    return *this;
  }
  inline I_Image_in& operator=(I_Image_in&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const I_Image_in& default_instance() {
    return *internal_default_instance();
  }
  static inline const I_Image_in* internal_default_instance() {
    return reinterpret_cast<const I_Image_in*>(
               &_I_Image_in_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(I_Image_in& a, I_Image_in& b) {
    a.Swap(&b);
  }
  inline void Swap(I_Image_in* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(I_Image_in* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline I_Image_in* New() const final {
    return CreateMaybeMessage<I_Image_in>(nullptr);
  }

  I_Image_in* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<I_Image_in>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const I_Image_in& from);
  void MergeFrom(const I_Image_in& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I_Image_in* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "I_Image_grpc.I_Image_in";
  }
  protected:
  explicit I_Image_in(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:I_Image_grpc.I_Image_in)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_I_5fImage_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class I_Image_out PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:I_Image_grpc.I_Image_out) */ {
 public:
  inline I_Image_out() : I_Image_out(nullptr) {}
  ~I_Image_out() override;
  explicit constexpr I_Image_out(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  I_Image_out(const I_Image_out& from);
  I_Image_out(I_Image_out&& from) noexcept
    : I_Image_out() {
    *this = ::std::move(from);
  }

  inline I_Image_out& operator=(const I_Image_out& from) {
    CopyFrom(from);
    return *this;
  }
  inline I_Image_out& operator=(I_Image_out&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const I_Image_out& default_instance() {
    return *internal_default_instance();
  }
  static inline const I_Image_out* internal_default_instance() {
    return reinterpret_cast<const I_Image_out*>(
               &_I_Image_out_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(I_Image_out& a, I_Image_out& b) {
    a.Swap(&b);
  }
  inline void Swap(I_Image_out* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(I_Image_out* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline I_Image_out* New() const final {
    return CreateMaybeMessage<I_Image_out>(nullptr);
  }

  I_Image_out* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<I_Image_out>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const I_Image_out& from);
  void MergeFrom(const I_Image_out& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I_Image_out* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "I_Image_grpc.I_Image_out";
  }
  protected:
  explicit I_Image_out(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kHFieldNumber = 1,
    kWFieldNumber = 2,
    kFormatFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 h = 1;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 2;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 3;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:I_Image_grpc.I_Image_out)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_I_5fImage_5fgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// I_Image_in

// -------------------------------------------------------------------

// I_Image_out

// int32 h = 1;
inline void I_Image_out::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I_Image_out::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I_Image_out::h() const {
  // @@protoc_insertion_point(field_get:I_Image_grpc.I_Image_out.h)
  return _internal_h();
}
inline void I_Image_out::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
}
inline void I_Image_out::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:I_Image_grpc.I_Image_out.h)
}

// int32 w = 2;
inline void I_Image_out::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I_Image_out::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I_Image_out::w() const {
  // @@protoc_insertion_point(field_get:I_Image_grpc.I_Image_out.w)
  return _internal_w();
}
inline void I_Image_out::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void I_Image_out::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:I_Image_grpc.I_Image_out.w)
}

// int32 format = 3;
inline void I_Image_out::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I_Image_out::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 I_Image_out::format() const {
  // @@protoc_insertion_point(field_get:I_Image_grpc.I_Image_out.format)
  return _internal_format();
}
inline void I_Image_out::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void I_Image_out::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:I_Image_grpc.I_Image_out.format)
}

// bytes data = 4;
inline void I_Image_out::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& I_Image_out::data() const {
  // @@protoc_insertion_point(field_get:I_Image_grpc.I_Image_out.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void I_Image_out::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:I_Image_grpc.I_Image_out.data)
}
inline std::string* I_Image_out::mutable_data() {
  // @@protoc_insertion_point(field_mutable:I_Image_grpc.I_Image_out.data)
  return _internal_mutable_data();
}
inline const std::string& I_Image_out::_internal_data() const {
  return data_.Get();
}
inline void I_Image_out::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* I_Image_out::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* I_Image_out::release_data() {
  // @@protoc_insertion_point(field_release:I_Image_grpc.I_Image_out.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void I_Image_out::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:I_Image_grpc.I_Image_out.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace I_Image_grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_I_5fImage_5fgrpc_2eproto
